/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotel.GUI;

import hotel.Util.DirectoryManager;
import hotel.Util.WindowLocation;
import hotel.DB.HotelDB;
import hotel.Util.HError;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.LinkedHashMap;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Vaud Keith
 */
public class JFProduct extends javax.swing.JDialog {

    /**
     * Creates new form JFProduct
     */
    //JFrame parent;
    private String ImagePath  = null;
    private String lastDirectory = null;
    private String key;
   
    
    public JFProduct() {
        initComponents();
        setModal(true);
        Dimension dimension = new Dimension(494,479);
        setSize(dimension);;
        setResizable(false);
        setTitle("Products");
        txtAllergens.setText("None");
        
        //parent = this;
        
        //Center the window       
        setLocation(WindowLocation.getCenterX(this.getWidth()),WindowLocation.getCenterY(this.getHeight()));
        setTopImage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAllergens = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnAddImage = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        pictureBox = new javax.swing.JLabel();
        topImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("ProductID:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Name:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Price:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Allergens:");

        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIDKeyTyped(evt);
            }
        });

        txtPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPriceKeyTyped(evt);
            }
        });

        txtAllergens.setColumns(20);
        txtAllergens.setRows(5);
        jScrollPane1.setViewportView(txtAllergens);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Image:");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnView.setText("Table View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnAddImage.setText("Add Image");
        btnAddImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddImageActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        pictureBox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(txtPrice)
                            .addComponent(txtName)
                            .addComponent(txtID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEdit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(42, 42, 42))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pictureBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(110, 110, 110))))
            .addComponent(topImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topImage, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnView)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(btnAddImage, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(pictureBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
      
    private void setTopImage(){
        SwingWorker worker = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {
               Image topImageIcon = new ImageIcon(getClass().getResource("/hotel/Images/cropa.png")).getImage();
               topImage.setIcon(new ImageIcon(topImageIcon.getScaledInstance(topImage.getWidth(), topImage.getHeight(),Image.SCALE_SMOOTH)));
               return null;
            }
        };
        
        worker.execute();
        
    }
    
    private boolean hasValue(String columnName,Object value){
        boolean hasVal = false;
        
        try {
            hasVal = HotelDB.isRowAvailable(HotelDB.PRODUCTS_TABLE,columnName,value,false);
        } catch (SQLException ex) {
            HError.showErrorMessage("P001: Database error.Cant fetch data.", null, ex.getMessage());
        }        
        return hasVal;
    }
    
    private void clearTextFields(){
        txtID.setText("");
        txtName.setText("");
        txtPrice.setText("");
        txtAllergens.setText("None");
        txtID.requestFocus();
        pictureBox.setIcon(null);
        ImagePath = null;
    }
    
    private boolean isNumber(char input){
        
        boolean isNum = false;
        
        char[] numbers = "1234567890".toCharArray();
        for(int i = 0;i<numbers.length;i++){
            if(input == numbers[i]){
                return true;
            }
        }
        
        return isNum;
    }
    
    private void controlStatus(boolean status){
        
        for(Component c : this.getRootPane().getContentPane().getComponents()){
            if(c instanceof JButton){
                ((JButton)c).setEnabled(status);
            }
        }  
        
    }
    
    public void getValuesToEdit(String id,String name,String price,String allergens,String path){
        key = id;
        txtID.setText(id);
        txtName.setText(name);
        txtPrice.setText(price);
        txtAllergens.setText(allergens);
        btnEdit.setText("Update");
        btnSave.setEnabled(false);
    }
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
       String ID = txtID.getText();
       String productName = txtName.getText();
       String price = txtPrice.getText();
       String allergens = txtAllergens.getText();
       
       if(!(ID.isEmpty() || productName.isEmpty() || price.isEmpty())){         
           setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
           controlStatus(false);
           if(hasValue("ProductID",ID)){
               HError.showErrorMessage("Product ID already exists", null);
               controlStatus(true);
               setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
               return;
           } 
           if(hasValue("ProductName",productName)){
               HError.showErrorMessage("Product name already exists", null);
               controlStatus(true);
               setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
               return;
           }
           try{
                HashMap<String,Object> product = new HashMap<>();
                product.put("ProductID", Integer.parseInt(ID));
                product.put("ProductName", productName);
                product.put("Price",Float.parseFloat(price));
                product.put("Allergens",allergens);
                
                if(ImagePath != null){
                    product.put("ImageLocation", ImagePath);
                }
                
                hotel.DB.HotelDB.insertTODB("products", product);
                
                JOptionPane.showMessageDialog(this,productName + " has been added"
                        + " successfully","Saved",JOptionPane.INFORMATION_MESSAGE);
                
                clearTextFields();
               
           }catch(Exception ex){
               HError.showErrorMessage("P002: Error saving data", null, ex.getMessage());
           }finally{
               setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
               controlStatus(true);
           }
       }else{
           JOptionPane.showMessageDialog(this,"Please fill in the:\nProductID\n"
                   + "ProductName\nPrice","Empty Fields",JOptionPane.WARNING_MESSAGE);
           txtID.requestFocus();
       }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddImageActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setDialogTitle("Select Image");
        
        String[] fileExtension = new String[]{".jpg",".jpeg",".png"};
        fileChooser.getFileSystemView().getDefaultDirectory();
        fileChooser.addChoosableFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if(f.isDirectory()){return true;}
                
                String fileName = f.getName().toLowerCase();
                
                for(String end : fileExtension){
                    if(fileName.endsWith(end)){
                        return true;
                    }
                }
                
                return false;
            }

            @Override
            public String getDescription() {
                return "Image Files(*.jpg,*.jpeg,*.png)";
            }
        });
        
        fileChooser.setAcceptAllFileFilterUsed(false);
        
        if(lastDirectory != null){
            File lastDir = new File(lastDirectory);
            if(lastDir.isDirectory()){
                fileChooser.setCurrentDirectory(lastDir);
            }           
        }
        
        int option = fileChooser.showDialog(this,"Set Image");
                        
        if(option == JFileChooser.APPROVE_OPTION){
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try{
            String selectedFile = fileChooser.getSelectedFile().getAbsolutePath();
            lastDirectory = fileChooser.getSelectedFile().getParentFile().toString();
            String selectedFileName = fileChooser.getSelectedFile().getName();
            
            //Copy the image to the directories folder
            Image productImage = new ImageIcon(fileChooser.getSelectedFile().getAbsolutePath()).getImage();
            
            //copyFile(selectedFile,DirectoryManager.getImageDirectory()+"\\"+selectedFileName);
            ImagePath = DirectoryManager.getImageDirectory()+"\\"+selectedFileName;
            resizeImage(fileChooser.getSelectedFile().getAbsolutePath(), ImagePath, 300, 300);            
            
            //Resize the image to fit the dimensions of the pictureBox
            Image resizedImage = productImage.getScaledInstance(pictureBox.getWidth(), pictureBox.getHeight(),Image.SCALE_SMOOTH);
            pictureBox.setIcon(new ImageIcon(resizedImage));
            }catch(Exception e){
                HError.showErrorMessage("G001: Image Error", null, e.getMessage());
            }finally{
            setCursor(Cursor.getDefaultCursor());
            }
        }
    }//GEN-LAST:event_btnAddImageActionPerformed

    private void resizeImage(String inputImagePath,String outputImagePath, int scaledWidth,int scaledHeight) throws IOException{
        File inputFile = new File(inputImagePath);
        BufferedImage inputImg = ImageIO.read(inputFile);
        
        BufferedImage outputImg = new BufferedImage(scaledWidth, scaledHeight, inputImg.getType());
        
        Graphics2D g2d = outputImg.createGraphics();
        g2d.drawImage(inputImg, 0,0, scaledWidth,scaledHeight,null);
        g2d.dispose();
        
        String imgFormat = outputImagePath.substring(outputImagePath.lastIndexOf(".")+1);
        
        ImageIO.write(outputImg, imgFormat, new File(outputImagePath));
    }
    
    private void copyFile(String source,String destination){
        
        try{
            //Create an inputStream
            BufferedInputStream input = new BufferedInputStream(new FileInputStream(new File(source)));
            //Create an outputStream
            BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(new File(destination)));       
        int r;
        //Write to the file
        while((r = input.read()) != -1){
            output.write((byte)r);
        }
        
        input.close();
        output.close();
        
        }catch(FileNotFoundException ex){
            HError.showErrorMessage("FNF Error.", null, ex.getMessage());
        }catch(IOException e){
            HError.showErrorMessage("IO Error", null, e.getMessage());
        }
    }
    
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        pictureBox.setIcon(null);
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
       if(btnEdit.getText().equalsIgnoreCase("edit")){
        JFProductsView productView = new JFProductsView("edit");
        productView.setVisible(true);
       }else if(btnEdit.getText().equalsIgnoreCase("update")){
           String ID = txtID.getText();
           String productName = txtName.getText();
           String price = txtPrice.getText();
           String allergens = txtAllergens.getText();
       
           if(!(ID.isEmpty() || productName.isEmpty() || price.isEmpty())){
               setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
               controlStatus(false);
               try{
                    LinkedHashMap<String,Object> product = new LinkedHashMap<>();
                    product.put("ProductName", productName);
                    product.put("Price",Float.parseFloat(price));
                    product.put("Allergens",allergens);

                    if(ImagePath != null){
                        product.put("ImageLocation", ImagePath);
                    }

                    product.put("ProductID", Integer.parseInt(key));

                    hotel.DB.HotelDB.updateDB("products", product);

                    JOptionPane.showMessageDialog(this,productName + " has been updated"
                            + " successfully","Saved",JOptionPane.INFORMATION_MESSAGE);

                    clearTextFields();

               }catch(Exception ex){
                   HError.showErrorMessage("P003: Error updating data.", null, ex.getMessage());
               }finally{
                   setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                   btnEdit.setText("Edit");
                   btnSave.setEnabled(true);
                   controlStatus(true);
               }
           }else{
                 JOptionPane.showMessageDialog(this,"Please fill in the:\nProductID\n"
                   + "ProductName\nPrice","Empty Fields",JOptionPane.WARNING_MESSAGE);
           }
           
       }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        JFProductsView productView = new JFProductsView("view");
        productView.setVisible(true);
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        clearTextFields();
        btnEdit.setText("Edit");
         btnSave.setEnabled(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceKeyTyped
        if(!isNumber(evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_txtPriceKeyTyped

    private void txtIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyTyped
       if(!isNumber(evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_txtIDKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFProduct().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddImage;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel pictureBox;
    private javax.swing.JLabel topImage;
    private javax.swing.JTextArea txtAllergens;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables
}
